// –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

export interface DailyReminder {
  id: string;
  type: 'motivation' | 'technique' | 'check_in' | 'milestone' | 'wellness' | 'social';
  title: string;
  body: string;
  scheduledTime: string; // HH:MM format
  frequency: 'daily' | 'weekly' | 'weekdays' | 'weekends' | 'custom';
  customDays?: number[]; // 0-6, –≥–¥–µ 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
  enabled: boolean;
  personalized: boolean;
  category: string;
  priority: 'low' | 'medium' | 'high';
  actionButtons?: NotificationAction[];
}

export interface NotificationAction {
  id: string;
  title: string;
  action: string;
  icon?: string;
}

export interface MotivationalContent {
  id: string;
  type: 'quote' | 'affirmation' | 'reminder' | 'achievement' | 'tip' | 'story';
  content: string;
  author?: string;
  category: string;
  mood: 'uplifting' | 'calming' | 'energizing' | 'reflective' | 'encouraging';
  difficultyLevel: 'easy' | 'challenging' | 'inspiring';
  personalityMatch: string[]; // —Ç–∏–ø—ã –ª–∏—á–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–¥—Ö–æ–¥–∏—Ç
}

export interface UserMotivationProfile {
  userId: string;
  preferredTimes: string[];
  motivationStyle: 'gentle' | 'direct' | 'inspirational' | 'practical';
  responseToReminders: 'high' | 'medium' | 'low';
  effectiveCategories: string[];
  skipDays: string[]; // –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
  personalizedQuotes: string[];
  milestonePreferences: MilestonePreference[];
}

export interface MilestonePreference {
  type: string;
  frequency: number;
  celebrationStyle: 'quiet' | 'enthusiastic' | 'social';
}

export class DailyMotivationSystem {
  private reminders: Map<string, DailyReminder[]> = new Map();
  private motivationalLibrary: MotivationalContent[];
  private userProfiles: Map<string, UserMotivationProfile> = new Map();
  
  constructor() {
    this.motivationalLibrary = this.initializeMotivationalContent();
    this.setupNotificationHandlers();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async initializeNotifications(): Promise<void> {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    const { status } = await Notifications.requestPermissionsAsync();
    
    if (status !== 'granted') {
      console.warn('Notification permissions not granted');
      return;
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await this.setupNotificationCategories();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.setupNotificationHandlers();
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createPersonalizedReminders(userId: string, preferences?: any): Promise<void> {
    const userProfile = this.getUserProfile(userId);
    const baseReminders = this.getBaseReminderTemplates();
    
    const personalizedReminders = baseReminders.map(reminder => 
      this.personalizeReminder(reminder, userProfile, preferences)
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressReminders = await this.generateProgressBasedReminders(userId);
    personalizedReminders.push(...progressReminders);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    this.reminders.set(userId, personalizedReminders);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await this.scheduleAllReminders(userId, personalizedReminders);
  }

  // –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  private getBaseReminderTemplates(): DailyReminder[] {
    return [
      {
        id: 'morning_motivation',
        type: 'motivation',
        title: 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
        body: '–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –∏—Å—Ü–µ–ª–µ–Ω–∏—è',
        scheduledTime: '08:00',
        frequency: 'daily',
        enabled: true,
        personalized: true,
        category: 'morning',
        priority: 'medium',
        actionButtons: [
          { id: 'set_intention', title: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å –¥–Ω—è', action: 'open_goal_setting' },
          { id: 'morning_meditation', title: '–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è', action: 'start_meditation' }
        ]
      },
      {
        id: 'midday_checkin',
        type: 'check_in',
        title: '‚òÄÔ∏è –ö–∞–∫ –¥–µ–ª–∞?',
        body: '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ',
        scheduledTime: '13:00',
        frequency: 'daily',
        enabled: true,
        personalized: true,
        category: 'wellness',
        priority: 'low',
        actionButtons: [
          { id: 'mood_check', title: '–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', action: 'open_mood_tracker' },
          { id: 'quick_technique', title: '–ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', action: 'suggest_technique' }
        ]
      },
      {
        id: 'evening_reflection',
        type: 'wellness',
        title: 'üåô –í—Ä–µ–º—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π',
        body: '–ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è?',
        scheduledTime: '21:00',
        frequency: 'daily',
        enabled: true,
        personalized: true,
        category: 'evening',
        priority: 'medium',
        actionButtons: [
          { id: 'gratitude_log', title: '–ó–∞–ø–∏—Å–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', action: 'open_gratitude' },
          { id: 'day_reflection', title: '–û—Ç—Ä–∞–∑–∏—Ç—å –¥–µ–Ω—å', action: 'open_reflection' }
        ]
      },
      {
        id: 'weekly_milestone',
        type: 'milestone',
        title: 'üéâ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
        body: '–í—Ä–µ–º—è –æ—Ç–º–µ—Ç–∏—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é!',
        scheduledTime: '19:00',
        frequency: 'weekly',
        enabled: true,
        personalized: true,
        category: 'achievement',
        priority: 'high'
      },
      {
        id: 'technique_reminder',
        type: 'technique',
        title: 'üßò –í—Ä–µ–º—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏',
        body: '–ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å—å –¥–µ–Ω—å',
        scheduledTime: '16:00',
        frequency: 'daily',
        enabled: true,
        personalized: true,
        category: 'practice',
        priority: 'medium'
      },
      {
        id: 'social_connection',
        type: 'social',
        title: 'üë• –°–≤—è–∑—å —Å –±–ª–∏–∑–∫–∏–º–∏',
        body: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –≤–∞–∂–Ω–∞ –¥–ª—è –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è',
        scheduledTime: '18:30',
        frequency: 'weekdays',
        enabled: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ
        personalized: true,
        category: 'social',
        priority: 'low'
      }
    ];
  }

  // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  private personalizeReminder(
    reminder: DailyReminder, 
    profile: UserMotivationProfile,
    preferences?: any
  ): DailyReminder {
    const personalized = { ...reminder };
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (profile.preferredTimes.length > 0) {
      const preferredTime = profile.preferredTimes.find(time => 
        Math.abs(this.timeToMinutes(time) - this.timeToMinutes(reminder.scheduledTime)) < 120
      );
      if (preferredTime) {
        personalized.scheduledTime = preferredTime;
      }
    }

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    personalized.body = this.adaptMessageStyle(reminder.body, profile.motivationStyle);
    
    // –í–∫–ª—é—á–∞–µ–º/–≤—ã–∫–ª—é—á–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (profile.responseToReminders === 'low' && reminder.priority === 'low') {
      personalized.enabled = false;
    }

    return personalized;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  private async generateProgressBasedReminders(userId: string): Promise<DailyReminder[]> {
    const progressReminders: DailyReminder[] = [];
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    // - –°–µ—Ä–∏–∏ —Ç—Ä–µ–∑–≤—ã—Ö –¥–Ω–µ–π
    // - –ü—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫
    // - –î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª–µ–π
    // - –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –¥–∞—Ç

    // –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ—Ä–∏–∏
    progressReminders.push({
      id: `streak_reminder_${userId}`,
      type: 'milestone',
      title: 'üî• –í–∞—à–∞ —Å–µ—Ä–∏—è —Ä–∞—Å—Ç–µ—Ç!',
      body: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!',
      scheduledTime: '20:00',
      frequency: 'weekly',
      enabled: true,
      personalized: true,
      category: 'achievement',
      priority: 'high'
    });

    return progressReminders;
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private async scheduleAllReminders(userId: string, reminders: DailyReminder[]): Promise<void> {
    // –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.cancelUserNotifications(userId);
    
    for (const reminder of reminders) {
      if (reminder.enabled) {
        await this.scheduleReminder(userId, reminder);
      }
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
  private async scheduleReminder(userId: string, reminder: DailyReminder): Promise<void> {
    const notificationId = `${userId}_${reminder.id}`;
    
    try {
      const trigger = this.createNotificationTrigger(reminder);
      
      await Notifications.scheduleNotificationAsync({
        identifier: notificationId,
        content: {
          title: reminder.title,
          body: this.getPersonalizedContent(userId, reminder),
          data: {
            userId,
            reminderId: reminder.id,
            type: reminder.type,
            category: reminder.category
          },
          categoryIdentifier: reminder.category,
          sound: 'default'
        },
        trigger
      });
    } catch (error) {
      console.error('Error scheduling reminder:', error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private createNotificationTrigger(reminder: DailyReminder): any {
    const [hours, minutes] = reminder.scheduledTime.split(':').map(Number);
    
    switch (reminder.frequency) {
      case 'daily':
        return {
          hour: hours,
          minute: minutes,
          repeats: true
        };
      
      case 'weekly':
        return {
          weekday: 1, // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
          hour: hours,
          minute: minutes,
          repeats: true
        };
      
      case 'weekdays':
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –æ—Ç–¥–µ–ª—å–Ω–æ
        return {
          weekday: [2, 3, 4, 5, 6], // –í—Ç-–°–± (–≤ iOS –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 1)
          hour: hours,
          minute: minutes,
          repeats: true
        };
      
      case 'weekends':
        return {
          weekday: [1, 7], // –í—Å, –°–±
          hour: hours,
          minute: minutes,
          repeats: true
        };
      
      case 'custom':
        if (reminder.customDays) {
          return reminder.customDays.map(day => ({
            weekday: day + 1, // iOS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-7
            hour: hours,
            minute: minutes,
            repeats: true
          }));
        }
        break;
    }
    
    return null;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  private getPersonalizedContent(userId: string, reminder: DailyReminder): string {
    if (!reminder.personalized) {
      return reminder.body;
    }

    const profile = this.getUserProfile(userId);
    
    // –í—ã–±–∏—Ä–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
    const relevantContent = this.motivationalLibrary.filter(content => 
      content.category === reminder.category || 
      profile.effectiveCategories.includes(content.category)
    );

    if (relevantContent.length > 0) {
      const selectedContent = relevantContent[Math.floor(Math.random() * relevantContent.length)];
      return this.adaptMessageStyle(selectedContent.content, profile.motivationStyle);
    }

    return reminder.body;
  }

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∏–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
  private adaptMessageStyle(message: string, style: string): string {
    switch (style) {
      case 'gentle':
        return message.replace(/!/g, '.').replace(/\b(–¥–æ–ª–∂–Ω—ã|–Ω—É–∂–Ω–æ)\b/g, '–º–æ–∂–µ—Ç–µ');
      
      case 'direct':
        return message + ' –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.';
      
      case 'inspirational':
        return '‚ú® ' + message + ' –í—ã —Å–ø–æ—Å–æ–±–Ω—ã –Ω–∞ –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞!';
      
      case 'practical':
        return message + ' –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
      
      default:
        return message;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  private initializeMotivationalContent(): MotivationalContent[] {
    return [
      {
        id: 'quote_001',
        type: 'quote',
        content: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - —ç—Ç–æ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–µ–±—è',
        category: 'morning',
        mood: 'uplifting',
        difficultyLevel: 'easy',
        personalityMatch: ['gentle', 'inspirational']
      },
      {
        id: 'affirmation_001',
        type: 'affirmation',
        content: '–Ø –¥–æ—Å—Ç–æ–∏–Ω –ª—é–±–≤–∏, –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å—á–∞—Å—Ç—å—è',
        category: 'morning',
        mood: 'uplifting',
        difficultyLevel: 'easy',
        personalityMatch: ['gentle', 'inspirational']
      },
      {
        id: 'reminder_001',
        type: 'reminder',
        content: '–ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –≤—Å–µ–≥–¥–∞ –ª–∏–Ω–µ–µ–Ω, –Ω–æ –∫–∞–∂–¥—ã–π —à–∞–≥ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ',
        category: 'evening',
        mood: 'encouraging',
        difficultyLevel: 'challenging',
        personalityMatch: ['direct', 'practical']
      },
      {
        id: 'tip_001',
        type: 'tip',
        content: '–ö–æ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Ç—è–≥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É "–û—Å—Ç–∞–Ω–æ–≤–∏—Å—å-–ü–æ–¥—ã—à–∏-–ù–∞–±–ª—é–¥–∞–π-–ü—Ä–æ–¥–æ–ª–∂–∞–π"',
        category: 'practice',
        mood: 'practical',
        difficultyLevel: 'easy',
        personalityMatch: ['practical', 'direct']
      },
      {
        id: 'achievement_001',
        type: 'achievement',
        content: '–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Å–∞–º—É—é —Ç—Ä—É–¥–Ω—É—é —á–∞—Å—Ç—å - —Ä–µ—à–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å',
        category: 'achievement',
        mood: 'encouraging',
        difficultyLevel: 'inspiring',
        personalityMatch: ['inspirational', 'gentle']
      },
      {
        id: 'story_001',
        type: 'story',
        content: '–ö–∞–∂–¥—ã–π —Ä–∞—Å—Å–≤–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–∞–º: —É –Ω–∞—Å –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
        category: 'morning',
        mood: 'reflective',
        difficultyLevel: 'inspiring',
        personalityMatch: ['inspirational', 'gentle']
      }
    ];
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private async setupNotificationCategories(): Promise<void> {
    const categories = [
      {
        identifier: 'morning',
        actions: [
          { identifier: 'set_intention', title: '–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å' },
          { identifier: 'morning_meditation', title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è' }
        ]
      },
      {
        identifier: 'wellness',
        actions: [
          { identifier: 'mood_check', title: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' },
          { identifier: 'quick_technique', title: '–¢–µ—Ö–Ω–∏–∫–∞' }
        ]
      },
      {
        identifier: 'evening',
        actions: [
          { identifier: 'gratitude_log', title: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å' },
          { identifier: 'day_reflection', title: '–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è' }
        ]
      }
    ];

    if (Platform.OS === 'ios') {
      await Notifications.setNotificationCategoryAsync(
        'morning',
        categories[0].actions.map(action => ({
          identifier: action.identifier,
          buttonTitle: action.title,
          options: { foreground: true }
        }))
      );
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  private setupNotificationHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    Notifications.addNotificationResponseReceivedListener(response => {
      const { userId, reminderId, type } = response.notification.request.content.data as any;
      this.handleNotificationResponse(userId, reminderId, type, response.actionIdentifier);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    Notifications.addNotificationReceivedListener(notification => {
      console.log('Notification received while app is active:', notification);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private handleNotificationResponse(
    userId: string, 
    reminderId: string, 
    type: string, 
    actionId: string
  ): void {
    console.log('Notification response:', { userId, reminderId, type, actionId });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    switch (actionId) {
      case 'set_intention':
        // –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π
        break;
      case 'morning_meditation':
        // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é
        break;
      case 'mood_check':
        // –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        break;
      // ... –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    this.recordNotificationInteraction(userId, reminderId, actionId);
  }

  // –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
  private recordNotificationInteraction(
    userId: string, 
    reminderId: string, 
    actionId: string
  ): void {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    console.log('Recording interaction:', { userId, reminderId, actionId });
  }

  // –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async cancelUserNotifications(userId: string): Promise<void> {
    const scheduledNotifications = await Notifications.getAllScheduledNotificationsAsync();
    
    const userNotifications = scheduledNotifications.filter(notification => 
      notification.identifier.startsWith(userId)
    );

    for (const notification of userNotifications) {
      await Notifications.cancelScheduledNotificationAsync(notification.identifier);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private getUserProfile(userId: string): UserMotivationProfile {
    let profile = this.userProfiles.get(userId);
    
    if (!profile) {
      profile = {
        userId,
        preferredTimes: ['08:00', '13:00', '21:00'],
        motivationStyle: 'gentle',
        responseToReminders: 'medium',
        effectiveCategories: ['morning', 'evening'],
        skipDays: [],
        personalizedQuotes: [],
        milestonePreferences: [
          { type: 'daily', frequency: 1, celebrationStyle: 'quiet' },
          { type: 'weekly', frequency: 7, celebrationStyle: 'enthusiastic' }
        ]
      };
      this.userProfiles.set(userId, profile);
    }
    
    return profile;
  }

  private timeToMinutes(time: string): number {
    const [hours, minutes] = time.split(':').map(Number);
    return hours * 60 + minutes;
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
  async updateReminderSettings(
    userId: string, 
    reminderId: string, 
    settings: Partial<DailyReminder>
  ): Promise<void> {
    const userReminders = this.reminders.get(userId);
    if (!userReminders) return;

    const reminderIndex = userReminders.findIndex(r => r.id === reminderId);
    if (reminderIndex === -1) return;

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    userReminders[reminderIndex] = { ...userReminders[reminderIndex], ...settings };
    
    // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await this.scheduleAllReminders(userId, userReminders);
  }

  async getUserReminders(userId: string): Promise<DailyReminder[]> {
    return this.reminders.get(userId) || [];
  }

  async enableReminder(userId: string, reminderId: string): Promise<void> {
    await this.updateReminderSettings(userId, reminderId, { enabled: true });
  }

  async disableReminder(userId: string, reminderId: string): Promise<void> {
    await this.updateReminderSettings(userId, reminderId, { enabled: false });
  }
}

export default DailyMotivationSystem;