// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞ —Å –ò–ò-–∏–Ω—Å–∞–π—Ç–∞–º–∏
import { ProgressEntry, MoodEntry } from './types';

export interface PersonalInsight {
  id: string;
  type: 'pattern' | 'risk' | 'achievement' | 'recommendation';
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
  confidence: number;
  actionableAdvice: string[];
  relatedData: any;
  timestamp: Date;
}

export interface RiskAssessment {
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  factors: string[];
  recommendations: string[];
  emergencyContacts?: string[];
}

export interface MotivationalContent {
  type: 'quote' | 'story' | 'tip' | 'challenge';
  content: string;
  author?: string;
  difficulty?: 'easy' | 'medium' | 'hard';
  duration?: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
}

class AdvancedInsightsService {
  private patterns: Map<string, any[]> = new Map();
  
  // –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å –ò–ò
  analyzeUserPatterns(progressData: ProgressEntry[], moodData: MoodEntry[]): PersonalInsight[] {
    const insights: PersonalInsight[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const timePatterns = this.analyzeTimePatterns(progressData);
    if (timePatterns.length > 0) {
      insights.push({
        id: `time-pattern-${Date.now()}`,
        type: 'pattern',
        title: 'üïí –ü–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω',
        description: `–í—ã —á–∞—â–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ ${timePatterns[0].period}`,
        severity: 'medium',
        confidence: 0.85,
        actionableAdvice: [
          '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã',
          '–°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è'
        ],
        relatedData: timePatterns,
        timestamp: new Date()
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    const emotionalTriggers = this.analyzeEmotionalTriggers(moodData);
    if (emotionalTriggers.riskMoods.length > 0) {
      insights.push({
        id: `emotion-trigger-${Date.now()}`,
        type: 'risk',
        title: '‚ö†Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
        description: `–ù–∏–∑–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫ —Å—Ä—ã–≤–∞`,
        severity: 'high',
        confidence: 0.92,
        actionableAdvice: [
          '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏',
          '–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π',
          '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–º –ø–ª–æ—Ö–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏'
        ],
        relatedData: emotionalTriggers,
        timestamp: new Date()
      });
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const streakAnalysis = this.analyzeStreakProgress(progressData);
    if (streakAnalysis.milestone) {
      insights.push({
        id: `milestone-${Date.now()}`,
        type: 'achievement',
        title: 'üéâ –í–∞–∂–Ω–∞—è –≤–µ—Ö–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!',
        description: `–í—ã –ø—Ä–æ—à–ª–∏ ${streakAnalysis.milestone} –¥–Ω–µ–π - —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!`,
        severity: 'low',
        confidence: 1.0,
        actionableAdvice: [
          '–û—Ç–ø—Ä–∞–∑–¥–Ω—É–π—Ç–µ —Å–≤–æ–π —É—Å–ø–µ—Ö –∑–¥–æ—Ä–æ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º',
          '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º —Å –±–ª–∏–∑–∫–∏–º–∏',
          '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏'
        ],
        relatedData: streakAnalysis,
        timestamp: new Date()
      });
    }
    
    return insights;
  }
  
  // –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —Ä–µ—Ü–∏–¥–∏–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  assessRelapsRisk(recentData: {
    mood: number;
    stress: number;
    sleep: number;
    socialSupport: number;
    cravings: number;
  }): RiskAssessment {
    const riskFactors: string[] = [];
    let riskScore = 0;
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
    if (recentData.mood <= 2) {
      riskFactors.push('–ù–∏–∑–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ');
      riskScore += 25;
    }
    
    if (recentData.stress >= 4) {
      riskFactors.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞');
      riskScore += 20;
    }
    
    if (recentData.sleep <= 2) {
      riskFactors.push('–ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞');
      riskScore += 15;
    }
    
    if (recentData.socialSupport <= 2) {
      riskFactors.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
      riskScore += 20;
    }
    
    if (recentData.cravings >= 4) {
      riskFactors.push('–°–∏–ª—å–Ω–∞—è —Ç—è–≥–∞ –∫ –∞–ª–∫–æ–≥–æ–ª—é');
      riskScore += 30;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    let riskLevel: 'low' | 'medium' | 'high' | 'critical';
    if (riskScore <= 20) riskLevel = 'low';
    else if (riskScore <= 50) riskLevel = 'medium';
    else if (riskScore <= 80) riskLevel = 'high';
    else riskLevel = 'critical';
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.generateRiskRecommendations(riskLevel, riskFactors);
    
    return {
      riskLevel,
      factors: riskFactors,
      recommendations,
      emergencyContacts: riskLevel === 'critical' ? [
        '‚òéÔ∏è –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –Ω–∞—Ä–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏: 8-800-200-02-00',
        'üöë –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103',
        'üë• –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ê–ª–∫–æ–≥–æ–ª–∏–∫–∏: 8-800-755-17-17'
      ] : undefined
    };
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  generateMotivationalContent(userProfile: any, currentStreak: number): MotivationalContent[] {
    const content: MotivationalContent[] = [];
    
    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (currentStreak < 7) {
      content.push({
        type: 'quote',
        content: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞. –í—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—Ç–µ!',
        author: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
      });
    } else if (currentStreak < 30) {
      content.push({
        type: 'story',
        content: '–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞: "–ü–æ—Å–ª–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è —è –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ —Å—Ç–∞–ª –ª—É—á—à–µ —Å–ø–∞—Ç—å –∏ —É –º–µ–Ω—è –ø–æ—è–≤–∏–ª–æ—Å—å –±–æ–ª—å—à–µ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Å–µ–º—å–∏."',
        author: '–ú–∏—Ö–∞–∏–ª, 2 –≥–æ–¥–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏'
      });
    } else {
      content.push({
        type: 'challenge',
        content: '–í—ã–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –ù–∞–π–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ö–æ–±–±–∏ –∏–ª–∏ –∑–∞–π–º–∏—Ç–µ—Å—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º. –û—Ç–∫—Ä–æ–π—Ç–µ –≤ —Å–µ–±–µ —Ç–∞–ª–∞–Ω—Ç—ã!',
        difficulty: 'medium',
        duration: 60
      });
    }
    
    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
    content.push({
      type: 'tip',
      content: '–°–æ–≤–µ—Ç –¥–Ω—è: –°–æ–∑–¥–∞–π—Ç–µ "–∞–ø—Ç–µ—á–∫—É —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏" - —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ –º–æ–º–µ–Ω—Ç—ã —Å–ª–∞–±–æ—Å—Ç–∏.',
      duration: 5
    });
    
    return content;
  }
  
  // –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
  predictOptimalInterventionTime(userData: any): Date[] {
    const riskTimes: Date[] = [];
    const now = new Date();
    
    // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π ML-–∞–ª–≥–æ—Ä–∏—Ç–º
    
    // –ü—è—Ç–Ω–∏—Ü–∞ –≤–µ—á–µ—Ä - —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    const nextFriday = new Date(now);
    nextFriday.setDate(now.getDate() + (5 - now.getDay() + 7) % 7);
    nextFriday.setHours(18, 0, 0, 0);
    riskTimes.push(nextFriday);
    
    // –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
    const weekend = new Date(now);
    weekend.setDate(now.getDate() + (6 - now.getDay() + 7) % 7);
    weekend.setHours(14, 0, 0, 0);
    riskTimes.push(weekend);
    
    return riskTimes;
  }
  
  private analyzeTimePatterns(data: ProgressEntry[]): any[] {
    const hourlyStats = new Map<number, { total: number; relapses: number }>();
    
    data.forEach(entry => {
      const hour = new Date(entry.date).getHours();
      const stats = hourlyStats.get(hour) || { total: 0, relapses: 0 };
      stats.total++;
      if (entry.status === 'relapse') stats.relapses++;
      hourlyStats.set(hour, stats);
    });
    
    const patterns = [];
    for (const [hour, stats] of hourlyStats) {
      if (stats.total > 5 && stats.relapses / stats.total > 0.3) {
        let period = '—É—Ç—Ä–æ–º';
        if (hour >= 12 && hour < 18) period = '–¥–Ω–µ–º';
        else if (hour >= 18 && hour < 22) period = '–≤–µ—á–µ—Ä–æ–º';
        else if (hour >= 22 || hour < 6) period = '–Ω–æ—á—å—é';
        
        patterns.push({ hour, period, riskRate: stats.relapses / stats.total });
      }
    }
    
    return patterns;
  }
  
  private analyzeEmotionalTriggers(moodData: MoodEntry[]): any {
    const lowMoodDays = moodData.filter(entry => entry.mood <= 2);
    const totalDays = moodData.length;
    
    return {
      riskMoods: lowMoodDays,
      riskRate: lowMoodDays.length / totalDays,
      averageMood: moodData.reduce((sum, entry) => sum + entry.mood, 0) / totalDays
    };
  }
  
  private analyzeStreakProgress(data: ProgressEntry[]): any {
    const currentStreak = this.calculateCurrentStreak(data);
    const milestones = [1, 3, 7, 14, 30, 60, 90, 180, 365];
    
    const reachedMilestone = milestones.find(milestone => 
      currentStreak === milestone || 
      (currentStreak > milestone && !milestones.some(m => m > milestone && m <= currentStreak))
    );
    
    return {
      currentStreak,
      milestone: reachedMilestone,
      nextMilestone: milestones.find(m => m > currentStreak)
    };
  }
  
  private calculateCurrentStreak(data: ProgressEntry[]): number {
    const sortedData = [...data].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
    let streak = 0;
    
    for (const entry of sortedData) {
      if (entry.status === 'sober') {
        streak++;
      } else {
        break;
      }
    }
    
    return streak;
  }
  
  private generateRiskRecommendations(riskLevel: string, factors: string[]): string[] {
    const baseRecommendations = [
      'üßò –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏',
      'üö∂ –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
      'üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º',
      'üì± –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏'
    ];
    
    const riskSpecificRecommendations: { [key: string]: string[] } = {
      low: [
        'üìö –ü–æ—á–∏—Ç–∞–π—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é –∫–Ω–∏–≥—É',
        'üéµ –ü–æ—Å–ª—É—à–∞–π—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â—É—é –º—É–∑—ã–∫—É'
      ],
      medium: [
        'üèÉ –ó–∞–π–º–∏—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏',
        '‚òéÔ∏è –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
        'üéØ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É'
      ],
      high: [
        'üö® –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é',
        'üè• –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É',
        'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏'
      ],
      critical: [
        'üÜò –°–†–û–ß–ù–û –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –∫—Ä–∏–∑–∏—Å–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
        'üè• –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏',
        'üëÆ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–ª—É–∂–±—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
      ]
    };
    
    return [...baseRecommendations, ...(riskSpecificRecommendations[riskLevel] || [])];
  }
}

export const advancedInsightsService = new AdvancedInsightsService();