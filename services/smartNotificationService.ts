// –°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

export interface SmartNotification {
  id: string;
  type: 'motivation' | 'reminder' | 'intervention' | 'achievement' | 'wellness';
  title: string;
  body: string;
  data?: any;
  scheduledFor?: Date;
  priority: 'low' | 'normal' | 'high' | 'critical';
  category?: string;
}

export interface NotificationPreferences {
  motivationalQuotes: boolean;
  dailyCheckIns: boolean;
  achievementCelebrations: boolean;
  riskInterventions: boolean;
  wellnessTips: boolean;
  quietHours: { start: string; end: string };
  frequency: 'minimal' | 'normal' | 'frequent';
}

class SmartNotificationService {
  private preferences: NotificationPreferences = {
    motivationalQuotes: true,
    dailyCheckIns: true,
    achievementCelebrations: true,
    riskInterventions: true,
    wellnessTips: true,
    quietHours: { start: '22:00', end: '08:00' },
    frequency: 'normal'
  };

  async initialize() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await Notifications.setNotificationCategoryAsync('motivation', [
      {
        identifier: 'read',
        buttonTitle: 'üìñ –ß–∏—Ç–∞—Ç—å',
        options: { isDestructive: false, isAuthenticationRequired: false }
      },
      {
        identifier: 'share',
        buttonTitle: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
        options: { isDestructive: false, isAuthenticationRequired: false }
      }
    ]);

    await Notifications.setNotificationCategoryAsync('intervention', [
      {
        identifier: 'get_help',
        buttonTitle: 'üÜò –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å',
        options: { isDestructive: false, isAuthenticationRequired: false }
      },
      {
        identifier: 'im_ok',
        buttonTitle: '‚úÖ –Ø –≤ –ø–æ—Ä—è–¥–∫–µ',
        options: { isDestructive: false, isAuthenticationRequired: false }
      }
    ]);

    await Notifications.setNotificationCategoryAsync('achievement', [
      {
        identifier: 'celebrate',
        buttonTitle: 'üéâ –û—Ç–ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å',
        options: { isDestructive: false, isAuthenticationRequired: false }
      },
      {
        identifier: 'share_achievement',
        buttonTitle: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
        options: { isDestructive: false, isAuthenticationRequired: false }
      }
    ]);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    Notifications.setNotificationHandler({
      handleNotification: async () => ({
        shouldShowAlert: true,
        shouldPlaySound: true,
        shouldSetBadge: false,
      }),
    });
  }

  // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async scheduleMotivationalNotifications(userProfile: any, streakDays: number) {
    if (!this.preferences.motivationalQuotes) return;

    const motivationalMessages = this.getMotivationalMessages(streakDays);
    const optimalTimes = this.calculateOptimalNotificationTimes(userProfile);

    for (let i = 0; i < 3; i++) {
      const message = motivationalMessages[i % motivationalMessages.length];
      const scheduledTime = optimalTimes[i];

      await this.scheduleSmartNotification({
        id: `motivation-${Date.now()}-${i}`,
        type: 'motivation',
        title: message.title,
        body: message.body,
        scheduledFor: scheduledTime,
        priority: 'normal',
        category: 'motivation',
        data: { streakDays, messageType: 'motivation' }
      });
    }
  }

  // –£–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
  async scheduleRiskInterventions(riskAssessment: any) {
    if (!this.preferences.riskInterventions) return;

    const interventionMessages = this.getRiskInterventionMessages(riskAssessment.riskLevel);
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    if (riskAssessment.riskLevel === 'high' || riskAssessment.riskLevel === 'critical') {
      await this.scheduleSmartNotification({
        id: `intervention-immediate-${Date.now()}`,
        type: 'intervention',
        title: interventionMessages.immediate.title,
        body: interventionMessages.immediate.body,
        scheduledFor: new Date(Date.now() + 1000), // —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        priority: 'critical',
        category: 'intervention',
        data: { riskLevel: riskAssessment.riskLevel, immediate: true }
      });
    }

    // –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const preventiveTimes = this.calculatePreventiveNotificationTimes(riskAssessment);
    for (const time of preventiveTimes) {
      await this.scheduleSmartNotification({
        id: `intervention-preventive-${time.getTime()}`,
        type: 'intervention',
        title: interventionMessages.preventive.title,
        body: interventionMessages.preventive.body,
        scheduledFor: time,
        priority: 'high',
        category: 'intervention',
        data: { riskLevel: riskAssessment.riskLevel, preventive: true }
      });
    }
  }

  // –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  async scheduleAchievementCelebration(achievement: any) {
    if (!this.preferences.achievementCelebrations) return;

    const celebrationMessage = this.getAchievementMessage(achievement);

    await this.scheduleSmartNotification({
      id: `achievement-${achievement.id}-${Date.now()}`,
      type: 'achievement',
      title: celebrationMessage.title,
      body: celebrationMessage.body,
      scheduledFor: new Date(Date.now() + 2000), // —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      priority: 'high',
      category: 'achievement',
      data: { 
        achievement,
        animation: 'celebration',
        confetti: true
      }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–∞—Å
    await this.scheduleSmartNotification({
      id: `achievement-followup-${achievement.id}-${Date.now()}`,
      type: 'achievement',
      title: 'üåü –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å!',
      body: `–í–∞—à–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "${achievement.name}" - —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω—ã–π –ø–æ–≤–æ–¥ –¥–ª—è –≥–æ—Ä–¥–æ—Å—Ç–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–ª–∏–∑–∫–∏–º!`,
      scheduledFor: new Date(Date.now() + 3600000), // —á–µ—Ä–µ–∑ —á–∞—Å
      priority: 'normal',
      category: 'achievement'
    });
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏ —Å AI-–∏–Ω—Å–∞–π—Ç–∞–º–∏
  async scheduleWellnessNotifications(healthData: any, insights: any[]) {
    if (!this.preferences.wellnessTips) return;

    const wellnessMessages = this.getWellnessMessages(healthData, insights);
    const wellnessTimes = this.calculateWellnessNotificationTimes();

    for (let i = 0; i < wellnessMessages.length; i++) {
      const message = wellnessMessages[i];
      const scheduledTime = wellnessTimes[i % wellnessTimes.length];

      await this.scheduleSmartNotification({
        id: `wellness-${Date.now()}-${i}`,
        type: 'wellness',
        title: message.title,
        body: message.body,
        scheduledFor: scheduledTime,
        priority: 'low',
        data: { 
          healthData,
          insight: message.insight,
          actionable: message.actionable
        }
      });
    }
  }

  // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö check-in'–æ–≤
  async scheduleDailyCheckIns(userProfile: any) {
    if (!this.preferences.dailyCheckIns) return;

    const checkInTimes = this.calculateOptimalCheckInTimes(userProfile);
    const checkInMessages = this.getDailyCheckInMessages();

    for (let i = 0; i < 7; i++) { // –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
      const date = new Date();
      date.setDate(date.getDate() + i);
      
      const message = checkInMessages[i % checkInMessages.length];
      const timeSlot = checkInTimes[i % checkInTimes.length];
      
      date.setHours(timeSlot.hours, timeSlot.minutes, 0, 0);

      await this.scheduleSmartNotification({
        id: `daily-checkin-${date.toDateString()}`,
        type: 'reminder',
        title: message.title,
        body: message.body,
        scheduledFor: date,
        priority: 'normal',
        data: { 
          type: 'daily_checkin',
          day: i,
          suggestedActivities: message.activities
        }
      });
    }
  }

  private async scheduleSmartNotification(notification: SmartNotification) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
    if (notification.scheduledFor && this.isInQuietHours(notification.scheduledFor)) {
      // –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —É—Ç—Ä–æ, –µ—Å–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (notification.priority !== 'critical') {
        notification.scheduledFor = this.moveToMorning(notification.scheduledFor);
      }
    }

    const trigger = notification.scheduledFor ? { date: notification.scheduledFor } : null;

    await Notifications.scheduleNotificationAsync({
      identifier: notification.id,
      content: {
        title: notification.title,
        body: notification.body,
        data: notification.data || {},
        categoryIdentifier: notification.category,
        priority: this.mapPriorityToSystem(notification.priority),
        sound: notification.priority === 'critical' ? 'default' : true,
        badge: notification.priority === 'critical' ? 1 : undefined
      },
      trigger
    });
  }

  private getMotivationalMessages(streakDays: number): any[] {
    const baseMessages = [
      {
        title: 'üí™ –°–∏–ª–∞ –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å',
        body: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ. –í—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å!'
      },
      {
        title: 'üåÖ –ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
        body: '–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –∑–¥–æ—Ä–æ–≤–æ–π –∂–∏–∑–Ω–∏.'
      },
      {
        title: 'üéØ –§–æ–∫—É—Å –Ω–∞ —Ü–µ–ª–∏',
        body: '–ü–æ–º–Ω–∏—Ç–µ, —Ä–∞–¥–∏ —á–µ–≥–æ –≤—ã –Ω–∞—á–∞–ª–∏ —ç—Ç–æ—Ç –ø—É—Ç—å. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!'
      }
    ];

    if (streakDays >= 7) {
      baseMessages.push({
        title: 'üî• –ù–µ–¥–µ–ª—è —Å–∏–ª—ã!',
        body: `${streakDays} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥! –í—ã –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—Ç–µ –≤—Å–µ.`
      });
    }

    if (streakDays >= 30) {
      baseMessages.push({
        title: 'üëë –ú–µ—Å—è—Ü –ø–æ–±–µ–¥!',
        body: `${streakDays} –¥–Ω–µ–π - —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! –í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ—é –∂–∏–∑–Ω—å.`
      });
    }

    return baseMessages;
  }

  private getRiskInterventionMessages(riskLevel: string): any {
    const messages = {
      low: {
        preventive: {
          title: 'üå± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—è–¥–æ–º',
          body: '–ü–æ–º–Ω–∏—Ç–µ: —É –≤–∞—Å –µ—Å—Ç—å —Å–∏–ª–∞ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ª—é–±—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.'
        }
      },
      medium: {
        immediate: {
          title: '‚ö†Ô∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã',
          body: '–°–µ–π—á–∞—Å –≤–∞–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è.'
        },
        preventive: {
          title: 'üõ°Ô∏è –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
          body: '–í—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.'
        }
      },
      high: {
        immediate: {
          title: 'üö® –í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫',
          body: '–°–µ–π—á–∞—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –í—ã –Ω–µ –æ–¥–∏–Ω–æ–∫–∏!'
        },
        preventive: {
          title: 'üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
          body: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –¥—Ä—É–≥—É –∏–ª–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.'
        }
      },
      critical: {
        immediate: {
          title: 'üî¥ –°–†–û–ß–ù–û: –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å',
          body: '–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â—å—é. –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è: 8-800-200-02-00'
        },
        preventive: {
          title: 'üÜò –ö—Ä–∏–∑–∏—Å–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ',
          body: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–º–æ—â—å —É–∂–µ –≤ –ø—É—Ç–∏.'
        }
      }
    };

    return messages[riskLevel as keyof typeof messages] || messages.medium;
  }

  private getAchievementMessage(achievement: any): any {
    const celebrationEmojis = ['üéâ', 'üèÜ', '‚≠ê', 'üéä', 'üíé', 'üëë'];
    const randomEmoji = celebrationEmojis[Math.floor(Math.random() * celebrationEmojis.length)];

    return {
      title: `${randomEmoji} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!`,
      body: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏: "${achievement.name}"! –≠—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è.`
    };
  }

  private getWellnessMessages(healthData: any, insights: any[]): any[] {
    const messages = [];

    if (healthData.sleepQuality < 3) {
      messages.push({
        title: 'üò¥ –°–æ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
        body: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω - –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏.',
        insight: 'sleep_improvement',
        actionable: true
      });
    }

    if (healthData.stressLevel > 3) {
      messages.push({
        title: 'üßò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ—Å—Å–æ–º',
        body: '–í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å –º–æ–∂–µ—Ç –æ—Å–ª–æ–∂–Ω–∏—Ç—å –ø—É—Ç—å –∫ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏. –£–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.',
        insight: 'stress_management',
        actionable: true
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –æ—Ç –ò–ò
    for (const insight of insights.slice(0, 2)) {
      if (insight.type === 'recommendation') {
        messages.push({
          title: 'ü§ñ –ò–ò-—Å–æ–≤–µ—Ç',
          body: insight.description,
          insight: insight.id,
          actionable: insight.actionableAdvice.length > 0
        });
      }
    }

    return messages;
  }

  private getDailyCheckInMessages(): any[] {
    return [
      {
        title: 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
        body: '–ö–∞–∫ –¥–µ–ª–∞? –û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.',
        activities: ['meditation', 'exercise', 'journaling']
      },
      {
        title: '‚òÄÔ∏è –°–µ—Ä–µ–¥–∏–Ω–∞ –¥–Ω—è',
        body: '–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è. –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–µ–Ω—å? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –æ—â—É—â–µ–Ω–∏—è–º–∏.',
        activities: ['walk', 'breathing', 'social_connection']
      },
      {
        title: 'üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è',
        body: '–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è. –ß—Ç–æ –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ? –û —á–µ–º —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å?',
        activities: ['reflection', 'gratitude', 'planning']
      }
    ];
  }

  private calculateOptimalNotificationTimes(userProfile: any): Date[] {
    const times = [];
    const now = new Date();

    // –£—Ç—Ä–µ–Ω–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è (8:00)
    const morning = new Date(now);
    morning.setDate(morning.getDate() + 1);
    morning.setHours(8, 0, 0, 0);
    times.push(morning);

    // –î–Ω–µ–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (14:00)
    const afternoon = new Date(morning);
    afternoon.setHours(14, 0, 0, 0);
    times.push(afternoon);

    // –í–µ—á–µ—Ä–Ω—è—è –º–æ—Ç–∏–≤–∞—Ü–∏—è (19:00)
    const evening = new Date(morning);
    evening.setHours(19, 0, 0, 0);
    times.push(evening);

    return times;
  }

  private calculatePreventiveNotificationTimes(riskAssessment: any): Date[] {
    const times = [];
    const now = new Date();

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    const intervals = {
      low: [6, 12], // –∫–∞–∂–¥—ã–µ 6-12 —á–∞—Å–æ–≤
      medium: [3, 6], // –∫–∞–∂–¥—ã–µ 3-6 —á–∞—Å–æ–≤  
      high: [1, 2],   // –∫–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞
      critical: [0.5] // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    };

    const riskIntervals = intervals[riskAssessment.riskLevel as keyof typeof intervals] || intervals.medium;

    for (let i = 0; i < 24; i += riskIntervals[0]) {
      const time = new Date(now.getTime() + i * 60 * 60 * 1000);
      if (!this.isInQuietHours(time)) {
        times.push(time);
      }
    }

    return times;
  }

  private calculateWellnessNotificationTimes(): Date[] {
    const times = [];
    const now = new Date();

    // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (9:00)
    const morning = new Date(now);
    morning.setDate(morning.getDate() + 1);
    morning.setHours(9, 0, 0, 0);
    times.push(morning);

    // –ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (16:00)
    const afternoon = new Date(morning);
    afternoon.setHours(16, 0, 0, 0);
    times.push(afternoon);

    return times;
  }

  private calculateOptimalCheckInTimes(userProfile: any): any[] {
    return [
      { hours: 8, minutes: 30 }, // —É—Ç—Ä–æ
      { hours: 14, minutes: 0 }, // –¥–µ–Ω—å
      { hours: 20, minutes: 30 }  // –≤–µ—á–µ—Ä
    ];
  }

  private isInQuietHours(date: Date): boolean {
    const hours = date.getHours();
    const startQuiet = parseInt(this.preferences.quietHours.start.split(':')[0]);
    const endQuiet = parseInt(this.preferences.quietHours.end.split(':')[0]);

    if (startQuiet > endQuiet) {
      // –¢–∏—Ö–∏–µ —á–∞—Å—ã –ø–µ—Ä–µ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å
      return hours >= startQuiet || hours < endQuiet;
    } else {
      return hours >= startQuiet && hours < endQuiet;
    }
  }

  private moveToMorning(date: Date): Date {
    const morning = new Date(date);
    morning.setDate(morning.getDate() + 1);
    morning.setHours(8, 0, 0, 0);
    return morning;
  }

  private mapPriorityToSystem(priority: string): Notifications.AndroidNotificationPriority {
    switch (priority) {
      case 'critical': return Notifications.AndroidNotificationPriority.MAX;
      case 'high': return Notifications.AndroidNotificationPriority.HIGH;
      case 'normal': return Notifications.AndroidNotificationPriority.DEFAULT;
      case 'low': return Notifications.AndroidNotificationPriority.LOW;
      default: return Notifications.AndroidNotificationPriority.DEFAULT;
    }
  }

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  updatePreferences(newPreferences: Partial<NotificationPreferences>) {
    this.preferences = { ...this.preferences, ...newPreferences };
  }

  getPreferences(): NotificationPreferences {
    return { ...this.preferences };
  }

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async cancelAllNotifications() {
    await Notifications.cancelAllScheduledNotificationsAsync();
  }

  // –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É
  async cancelNotificationsByType(type: string) {
    const scheduled = await Notifications.getAllScheduledNotificationsAsync();
    const toCancel = scheduled
      .filter(notification => notification.identifier.includes(type))
      .map(notification => notification.identifier);
    
    for (const id of toCancel) {
      await Notifications.cancelScheduledNotificationAsync(id);
    }
  }
}

export const smartNotificationService = new SmartNotificationService();