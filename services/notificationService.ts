import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

export interface NotificationTrigger {
  type: 'daily' | 'weekly' | 'interval';
  hour?: number; // 0-23
  minute?: number; // 0-59
  weekday?: number; // 1-7 (Monday = 1)
  seconds?: number; // –¥–ª—è interval
}

export interface RecoveryNotification {
  id: string;
  title: string;
  body: string;
  trigger: NotificationTrigger;
  category: 'motivation' | 'reminder' | 'emergency' | 'celebration' | 'exercise';
  enabled: boolean;
}

const defaultNotifications: RecoveryNotification[] = [
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  {
    id: 'morning-motivation',
    title: 'üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!',
    body: '–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–∏–ª—å–Ω—ã–º. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!',
    trigger: { type: 'daily', hour: 9, minute: 0 },
    category: 'motivation',
    enabled: true
  },
  {
    id: 'evening-reflection',
    title: 'üåô –í—Ä–µ–º—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π',
    body: '–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ —Å–µ–±—è –∑–∞ —É—Å–∏–ª–∏—è.',
    trigger: { type: 'daily', hour: 21, minute: 0 },
    category: 'reminder',
    enabled: true
  },
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö
  {
    id: 'midday-exercise',
    title: 'üßò‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –¥–ª—è —Å–µ–±—è',
    body: '–°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏–ª–∏ –ù–õ–ü —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.',
    trigger: { type: 'daily', hour: 14, minute: 30 },
    category: 'exercise',
    enabled: true
  },
  
  // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
  {
    id: 'weekly-progress',
    title: 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
    body: '–í—Ä–µ–º—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é!',
    trigger: { type: 'weekly', weekday: 7, hour: 18, minute: 0 },
    category: 'reminder',
    enabled: true
  },
  
  // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ª–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è
  {
    id: 'tough-moment-1',
    title: 'üí™ –í—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—Ç–µ',
    body: '–ö–∞–∂–¥–æ–µ "–Ω–µ—Ç" –∞–ª–∫–æ–≥–æ–ª—é –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Å–∏–ª—å–Ω–µ–µ. –î—ã—à–∏—Ç–µ –≥–ª—É–±–æ–∫–æ.',
    trigger: { type: 'daily', hour: 17, minute: 0 }, // –ß–∞—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è
    category: 'motivation',
    enabled: true
  },
  {
    id: 'tough-moment-2',
    title: 'üéØ –ü–æ–º–Ω–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏',
    body: '–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –∂–∏–∑–Ω—å –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è. –ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?',
    trigger: { type: 'daily', hour: 19, minute: 30 },
    category: 'motivation',
    enabled: true
  },
  
  // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  {
    id: 'milestone-reminder',
    title: 'üéâ –í—Ä–µ–º—è –ø—Ä–∞–∑–¥–Ω–æ–≤–∞—Ç—å!',
    body: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è - –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–∞ –æ—Ç–º–µ—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥–Ω—É—é –≤–µ—Ö—É!',
    trigger: { type: 'weekly', weekday: 5, hour: 20, minute: 0 },
    category: 'celebration',
    enabled: true
  },
  
  // –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Ç—è–≥–∏
  {
    id: 'craving-help',
    title: 'üÜò –°–ø—Ä–∞–≤–ª—è–µ–º—Å—è —Å —Ç—è–≥–æ–π',
    body: '–ü–æ–º–Ω–∏—Ç–µ: —Ç—è–≥–∞ –∫–∞–∫ –≤–æ–ª–Ω–∞ - –æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø–∞–¥–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É "—Å–µ—Ä—Ñ–∏–Ω–≥ –ø–æ —Ç—è–≥–µ".',
    trigger: { type: 'daily', hour: 22, minute: 0 }, // –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è
    category: 'emergency',
    enabled: false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–æ, –≤–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }
];

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const motivationalMessages = [
  {
    title: 'üåü –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ',
    body: '–°–µ–≥–æ–¥–Ω—è –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ. –ì–æ—Ä–¥–∏—Ç–µ—Å—å —Å–≤–æ–∏–º —Ä–µ—à–µ–Ω–∏–µ–º!'
  },
  {
    title: 'üî• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏–ª–∞',
    body: '–í –≤–∞—Å –µ—Å—Ç—å –≤—Å—è —Å–∏–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ª—é–±—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π.'
  },
  {
    title: 'üéØ –§–æ–∫—É—Å –Ω–∞ —Ü–µ–ª–∏',
    body: '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ –≥–æ–¥ - –∑–¥–æ—Ä–æ–≤—ã–º, —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º.'
  },
  {
    title: 'üíé –í—ã - –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å',
    body: '–ö–∞–∂–¥—ã–π —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –¥–æ–±–∞–≤–ª—è–µ—Ç –±–ª–µ—Å–∫ –≤ –±—Ä–∏–ª–ª–∏–∞–Ω—Ç –≤–∞—à–µ–π –∂–∏–∑–Ω–∏.'
  },
  {
    title: 'üåà –ü–æ—Å–ª–µ –±—É—Ä–∏ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—É–≥–∞',
    body: '–°–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω—ã. –í–∞—à–∞ —Å–∏–ª–∞ - –ø–æ—Å—Ç–æ—è–Ω–Ω–∞.'
  }
];

class NotificationService {
  private static instance: NotificationService;
  private notifications: RecoveryNotification[] = defaultNotifications;
  
  static getInstance(): NotificationService {
    if (!NotificationService.instance) {
      NotificationService.instance = new NotificationService();
    }
    return NotificationService.instance;
  }

  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  async requestPermissions(): Promise<boolean> {
    if (Platform.OS === 'web') {
      return true; // Web notifications handled differently
    }

    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    
    return finalStatus === 'granted';
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async loadNotificationSettings(): Promise<void> {
    try {
      const stored = await AsyncStorage.getItem('notification_settings');
      if (stored) {
        this.notifications = JSON.parse(stored);
      }
    } catch (error) {
      console.error('Failed to load notification settings:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async saveNotificationSettings(): Promise<void> {
    try {
      await AsyncStorage.setItem('notification_settings', JSON.stringify(this.notifications));
    } catch (error) {
      console.error('Failed to save notification settings:', error);
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async scheduleAllNotifications(): Promise<void> {
    await this.cancelAllNotifications();
    
    for (const notification of this.notifications) {
      if (notification.enabled) {
        await this.scheduleNotification(notification);
      }
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private async scheduleNotification(notification: RecoveryNotification): Promise<void> {
    if (Platform.OS === 'web') {
      return; // Skip for web platform
    }

    const trigger = this.createTrigger(notification.trigger);
    
    await Notifications.scheduleNotificationAsync({
      identifier: notification.id,
      content: {
        title: notification.title,
        body: notification.body,
        categoryIdentifier: notification.category,
        sound: 'default'
      },
      trigger
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  private createTrigger(trigger: NotificationTrigger) {
    switch (trigger.type) {
      case 'daily':
        return {
          hour: trigger.hour || 9,
          minute: trigger.minute || 0,
          repeats: true
        };
      
      case 'weekly':
        return {
          weekday: trigger.weekday || 1,
          hour: trigger.hour || 9,
          minute: trigger.minute || 0,
          repeats: true
        };
      
      case 'interval':
        return {
          seconds: trigger.seconds || 3600,
          repeats: true
        };
      
      default:
        return {
          hour: 9,
          minute: 0,
          repeats: true
        };
    }
  }

  // –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async cancelAllNotifications(): Promise<void> {
    if (Platform.OS !== 'web') {
      await Notifications.cancelAllScheduledNotificationsAsync();
    }
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async toggleNotification(notificationId: string, enabled: boolean): Promise<void> {
    const notification = this.notifications.find(n => n.id === notificationId);
    if (notification) {
      notification.enabled = enabled;
      await this.saveNotificationSettings();
      
      if (enabled) {
        await this.scheduleNotification(notification);
      } else {
        await this.cancelNotification(notificationId);
      }
    }
  }

  // –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async cancelNotification(notificationId: string): Promise<void> {
    if (Platform.OS !== 'web') {
      await Notifications.cancelScheduledNotificationAsync(notificationId);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendEmergencyNotification(message?: string): Promise<void> {
    const randomMotivation = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)];
    
    const notification = {
      title: message ? 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—è–¥–æ–º' : randomMotivation.title,
      body: message || randomMotivation.body,
      categoryIdentifier: 'emergency',
      sound: 'default'
    };

    if (Platform.OS === 'web') {
      // Web notification
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(notification.title, {
          body: notification.body,
          icon: '/favicon.ico'
        });
      }
    } else {
      await Notifications.scheduleNotificationAsync({
        content: notification,
        trigger: null // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      });
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
  async sendAchievementNotification(title: string, description: string): Promise<void> {
    const notification = {
      title: `üèÜ ${title}`,
      body: description,
      categoryIdentifier: 'celebration',
      sound: 'default'
    };

    if (Platform.OS === 'web') {
      if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(notification.title, {
          body: notification.body,
          icon: '/favicon.ico'
        });
      }
    } else {
      await Notifications.scheduleNotificationAsync({
        content: notification,
        trigger: null
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  getNotifications(): RecoveryNotification[] {
    return this.notifications;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async updateNotification(notificationId: string, updates: Partial<RecoveryNotification>): Promise<void> {
    const notification = this.notifications.find(n => n.id === notificationId);
    if (notification) {
      Object.assign(notification, updates);
      await this.saveNotificationSettings();
      
      if (notification.enabled) {
        await this.cancelNotification(notificationId);
        await this.scheduleNotification(notification);
      }
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async addCustomNotification(notification: Omit<RecoveryNotification, 'id'>): Promise<void> {
    const id = `custom_${Date.now()}`;
    const newNotification: RecoveryNotification = {
      ...notification,
      id
    };
    
    this.notifications.push(newNotification);
    await this.saveNotificationSettings();
    
    if (newNotification.enabled) {
      await this.scheduleNotification(newNotification);
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async removeNotification(notificationId: string): Promise<void> {
    await this.cancelNotification(notificationId);
    this.notifications = this.notifications.filter(n => n.id !== notificationId);
    await this.saveNotificationSettings();
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async initialize(): Promise<void> {
    const hasPermission = await this.requestPermissions();
    if (hasPermission) {
      await this.loadNotificationSettings();
      await this.scheduleAllNotifications();
    }
  }

  // Web push notifications setup
  async setupWebNotifications(): Promise<void> {
    if (Platform.OS === 'web' && 'Notification' in window) {
      if (Notification.permission === 'default') {
        const permission = await Notification.requestPermission();
        return permission === 'granted';
      }
      return Notification.permission === 'granted';
    }
    return false;
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤/–≤–∏—Ç–∞–º–∏–Ω–æ–≤ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
  async scheduleMedicationReminder(time: { hour: number; minute: number }): Promise<void> {
    const notification: RecoveryNotification = {
      id: 'medication_reminder',
      title: 'üíä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ',
      body: '–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã –∏–ª–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.',
      trigger: { type: 'daily', hour: time.hour, minute: time.minute },
      category: 'reminder',
      enabled: true
    };

    const existingIndex = this.notifications.findIndex(n => n.id === 'medication_reminder');
    if (existingIndex >= 0) {
      this.notifications[existingIndex] = notification;
    } else {
      this.notifications.push(notification);
    }

    await this.saveNotificationSettings();
    await this.scheduleNotification(notification);
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async scheduleAdaptiveNotifications(soberDays: number): Promise<void> {
    // –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏
    let adaptiveNotification: RecoveryNotification;

    if (soberDays < 7) {
      adaptiveNotification = {
        id: 'adaptive_early',
        title: 'üå± –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        body: '–ö–∞–∂–¥—ã–π —á–∞—Å —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞. –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!',
        trigger: { type: 'daily', hour: 16, minute: 0 },
        category: 'motivation',
        enabled: true
      };
    } else if (soberDays < 30) {
      adaptiveNotification = {
        id: 'adaptive_building',
        title: 'üí™ –ù–∞–±–∏—Ä–∞–µ–º —Å–∏–ª—É',
        body: '–í–∞—à–µ —Ç–µ–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, —Ä–∞–∑—É–º –ø—Ä–æ—è—Å–Ω—è–µ—Ç—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!',
        trigger: { type: 'daily', hour: 16, minute: 0 },
        category: 'motivation',
        enabled: true
      };
    } else if (soberDays < 90) {
      adaptiveNotification = {
        id: 'adaptive_strengthening',
        title: 'üèãÔ∏è‚Äç‚ôÇÔ∏è –£–∫—Ä–µ–ø–ª—è–µ–º—Å—è',
        body: '–ü—Ä–∏–≤—ã—á–∫–∏ –º–µ–Ω—è—é—Ç—Å—è, –∂–∏–∑–Ω—å —É–ª—É—á—à–∞–µ—Ç—Å—è. –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å–µ–±—è!',
        trigger: { type: 'daily', hour: 16, minute: 0 },
        category: 'motivation',
        enabled: true
      };
    } else {
      adaptiveNotification = {
        id: 'adaptive_mastery',
        title: 'üëë –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
        body: '–í—ã - –ø—Ä–∏–º–µ—Ä —Å–∏–ª—ã –∏ —Ä–µ—à–∏–º–æ—Å—Ç–∏. –í–∞—à –æ–ø—ã—Ç –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –¥—Ä—É–≥–∏—Ö!',
        trigger: { type: 'daily', hour: 16, minute: 0 },
        category: 'motivation',
        enabled: true
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const existingIndex = this.notifications.findIndex(n => n.id.startsWith('adaptive_'));
    
    if (existingIndex >= 0) {
      // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ
      await this.cancelNotification(this.notifications[existingIndex].id);
      this.notifications[existingIndex] = adaptiveNotification;
    } else {
      this.notifications.push(adaptiveNotification);
    }

    await this.saveNotificationSettings();
    await this.scheduleNotification(adaptiveNotification);
  }
}

export default NotificationService.getInstance();